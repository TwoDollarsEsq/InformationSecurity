<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>BaseFile</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/Template.playgroundpage/main.swift</string>
	<key>Diffs</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>import SwiftUI

struct ContentView: View {
    @State private var coding: CodingState = .encoding
    @State private var source: String = "–ü—Ä–∏–≤–µ—Ç, –ì–æ—Å—Ç!ü§©"
    @State private var key: String = "correct-horse-battery-staple_go!"
    @State private var dataSource: String = "[208, 224, 212, 178, 208, 199, 213, 128, 44, 120, 212, 147, 208, 61, 209, 130, 209, 218, 37, 240, 208, 174, 209, 129, 0, 144, 3, 0, 159, 252, 168, 0]"
    
    var body: some View {
        NavigationView {
            VStack {
                modeSwitch
                form
            }
        }
        .navigationViewStyle(StackNavigationViewStyle())
    }
}

private extension ContentView {
    enum CodingState: String, Hashable, CaseIterable {
        case encoding = "–®–∏—Ñ—Ä—É–µ–º"
        case decoding = "–î–µ—à–∏—Ñ—Ä—É–µ–º"
        var isEncoding: Bool { self == .encoding }
    }
    
    var modeSwitch: some View {
        Picker("–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã", selection: $coding) {
            ForEach(CodingState.allCases, id: \.self) { value in
                Text(value.rawValue)
                    .tag(value)
            }
        }
        .pickerStyle(SegmentedPickerStyle())
        .padding()
    }
    
    var form: some View {
        Form {
            Section(header: Text(upperHeader)) {
                TextField(upperHeader, text: coding.isEncoding ? $source : $dataSource)
            }
            
            Section(header: Text(keyHeader)) {
                TextField(keyHeader, text: $key)
            }
            
            Section(header: Text(bottomHeader)) {
                TextField(bottomHeader, text: .constant(
                    coding.isEncoding 
                        ? jsonBytes(from: try! encode(Data(source.utf8), with: keyAsData))
                        : String(decoding: try! decode(data(from: dataSource), with: keyAsData), as: UTF8.self))
                )
            }
        }
        .navigationBarTitle("–ì–æ—Å—Ç-28147-29")
    }
    
    var upperHeader: String {
        coding.isEncoding ? "–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç" : "–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–∞–π—Ç—ã"
    }
    
    var keyHeader: String { "–ö–ª—é—á" }
    
    var bottomHeader: String {
        coding.isEncoding ? "–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–∞–π—Ç—ã" : "–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"
    }
    
    var keyAsData: Data { Data(key.utf8) }
    
    func jsonBytes(from data: Data) -&gt; String {
        String(describing: data.map { $0 })
    }
    
    func data(from json: String) -&gt; Data {
        Data(try! JSONDecoder().decode([UInt8].self, from: Data(json.utf8)))
    }
}

ContentView().embedIntoPlayground()
</string>
			<key>ModifiedRange</key>
			<string>{0, 2537}</string>
			<key>OriginalContent</key>
			<string>
</string>
			<key>OriginalRange</key>
			<string>{0, 1}</string>
		</dict>
	</array>
	<key>FormatVersion</key>
	<integer>2</integer>
</dict>
</plist>
